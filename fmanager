#!/usr/bin/env python3

import sys
import os
from PyQt5.QtWidgets import QApplication, QMainWindow, QListWidget, QVBoxLayout, QListWidgetItem, QLabel, QTextEdit, \
    QDialog, QVBoxLayout, QPushButton, QLineEdit, QFileDialog, QToolBar, QAction, QInputDialog

from PyQt5.QtGui import QIcon, QPixmap


class ImageViewer(QDialog):
    def __init__(self, image_path):
        super().__init__()

        self.setWindowTitle('Image Viewer')
        layout = QVBoxLayout()

        label = QLabel()
        pixmap = QPixmap(image_path)
        label.setPixmap(pixmap)
        label.setScaledContents(True)

        layout.addWidget(label)

        self.setLayout(layout)
        self.setMinimumSize(800, 600)


class TextEditor(QDialog):
    def __init__(self, text):
        super().__init__()

        self.setWindowTitle('Text Editor')
        layout = QVBoxLayout()

        text_edit = QTextEdit()
        text_edit.setPlainText(text)

        layout.addWidget(text_edit)

        self.setLayout(layout)
        self.setMinimumSize(800, 600)


class CodeEditor(QDialog):
    def __init__(self, code):
        super().__init__()

        self.setWindowTitle('Code Editor')
        layout = QVBoxLayout()

        self.code_edit = QTextEdit()
        self.code_edit.setPlainText(code)

        self.save_button = QPushButton('Save')
        self.run_button = QPushButton('Run')
        self.result_label = QLabel('Program finished. Errors: No errors.')

        layout.addWidget(self.code_edit)
        layout.addWidget(self.save_button)
        layout.addWidget(self.run_button)
        layout.addWidget(self.result_label)

        self.save_button.clicked.connect(self.saveCode)
        self.run_button.clicked.connect(self.runCode)

        self.setLayout(layout)
        self.setMinimumSize(800, 600)

    def saveCode(self):
        # Save code to a file
        code = self.code_edit.toPlainText()
        options = QFileDialog.Options()
        options |= QFileDialog.ReadOnly
        file_name, _ = QFileDialog.getSaveFileName(self, "Save Code", "", "All Files (*);;Text Files (*.txt);;Python Files (*.py)", options=options)
        if file_name:
            with open(file_name, 'w') as f:
                f.write(code)

    def runCode(self):
        # Run the code
        code = self.code_edit.toPlainText()
        # TODO: Implement code execution (this is beyond the scope of this example)


class FManager(QMainWindow):
    def __init__(self):
        super().__init__()

        self.initUI()

    def initUI(self):
        self.fileList = QListWidget(self)
        self.fileList.itemDoubleClicked.connect(self.onItemDoubleClick)
        self.setCentralWidget(self.fileList)

        self.setMinimumSize(800, 600)
        self.setWindowTitle('FManager')

        toolbar = QToolBar()
        self.addToolBar(toolbar)

        newFolderAction = QAction('New Folder', self)
        newFolderAction.triggered.connect(self.newFolder)
        toolbar.addAction(newFolderAction)

        newFileAction = QAction('New File', self)
        newFileAction.triggered.connect(self.newFile)
        toolbar.addAction(newFileAction)

        start_directory = '/home/tata/'  
        self.loadFiles(start_directory)

    def loadFiles(self, directory):
        self.current_directory = directory
        self.fileList.clear()

        if directory != os.path.abspath(os.sep):
            item = self.createItem('..', 'folder.png')
            item.path = os.path.abspath(os.path.join(directory, os.pardir))
            self.fileList.addItem(item)

        for entry in os.listdir(directory):
            full_path = os.path.join(directory, entry)
            if os.path.isdir(full_path):
                item = self.createItem(entry, 'folder.svg')
            else:
                item = self.createItem(entry, 'edit-select-all.svg')
            item.path = full_path
            self.fileList.addItem(item)

    def createItem(self, text, icon):
        item = QListWidgetItem(text)
        pixmap = QPixmap(icon)
        item.setIcon(QIcon(pixmap))
        return item

    def onItemDoubleClick(self, item):
        if os.path.isdir(item.path):
            self.loadFiles(item.path)
        else:
            if item.text().endswith(('.txt', '.py', '.html', '.css', '.js')):
                with open(item.path, 'r') as f:
                    text = f.read()
                editor = TextEditor(text)
                editor.exec_()
            elif item.text().endswith(('.jpg', '.png', '.bmp', '.gif')):
                viewer = ImageViewer(item.path)
                viewer.exec_()
            elif item.text().endswith(('.c', '.cpp', '.h', '.js', '.py')):
                with open(item.path, 'r') as f:
                    code = f.read()
                editor = CodeEditor(code)
                editor.exec_()

    def newFolder(self):
        folder_name, ok = QInputDialog.getText(self, 'New Folder', 'Folder name:')
        if ok:
            new_folder_path = os.path.join(self.current_directory, folder_name)
            os.makedirs(new_folder_path)
            self.loadFiles(self.current_directory)

    def newFile(self):
        file_name, ok = QInputDialog.getText(self, 'New File', 'File name:')
        if ok:
            options = QFileDialog.Options()
            options |= QFileDialog.ReadOnly
            file_name, _ = QFileDialog.getSaveFileName(self, "New File", "", "All Files (*);;Text Files (*.txt);;Python Files (*.py)", options=options)
            if file_name:
                with open(file_name, 'w') as f:
                    f.write('')
                self.loadFiles(self.current_directory)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    manager = FManager()
    manager.show()
    sys.exit(app.exec_())

